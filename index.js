const express = require('express');
const fs = require('fs');
const login = require('ws3-fca');

const app = express();
const PORT = process.env.PORT || 3000;

// appstate.json ‡§™‡§¢‡§º‡§®‡§æ
let appState;
try {
  appState = JSON.parse(fs.readFileSync('appstate.json', 'utf-8'));
} catch (err) {
  console.error('‚ùå appstate.json ‡§™‡§¢‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:', err);
  process.exit(1);
}

// ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§®
const GROUP_THREAD_ID = '24196335160017473';
const LOCKED_GROUP_NAME = 'ü§™ EXIT FUNNY KIDX + TUSHAR BOKA CHUDKE DAFAN üòÇ';

// frontend html ‡§ï‡•ã ‡§è‡§ï ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç
const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Group Name Locker Bot</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      background-image: url('https://images.unsplash.com/photo-1520880867055-1e30d1cb001c?auto=format&fit=crop&w=1470&q=80');
      background-size: cover;
      background-position: center;
      animation: bgAnimation 30s ease-in-out infinite alternate;
    }
    @keyframes bgAnimation {
      0% { filter: brightness(0.8);}
      50% { filter: brightness(1.0);}
      100% { filter: brightness(0.8);}
    }
    header {
      padding: 20px;
      font-size: 2rem;
      font-weight: 700;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    #status {
      margin: 10px 0;
      font-size: 1.1rem;
      font-weight: 500;
      background: rgba(0,0,0,0.3);
      padding: 10px 20px;
      border-radius: 15px;
      box-shadow: 0 0 10px rgba(255,255,255,0.6);
      width: 80%;
      max-width: 600px;
      text-align: center;
      animation: glow 2s infinite alternate;
    }
    @keyframes glow {
      from {text-shadow: 0 0 10px #a29bfe;}
      to {text-shadow: 0 0 20px #6c5ce7;}
    }
    #info {
      background: rgba(0,0,0,0.3);
      border-radius: 15px;
      box-shadow: 0 0 20px #7f8c8d;
      width: 80%;
      max-width: 600px;
      padding: 20px;
      margin-bottom: 20px;
      font-size: 1rem;
      color: #dfe6e9;
      overflow-wrap: break-word;
    }
    #logs {
      background: rgba(0,0,0,0.25);
      border-radius: 15px;
      padding: 15px;
      width: 80%;
      max-width: 600px;
      height: 200px;
      overflow-y: auto;
      font-family: monospace;
      font-size: 0.9rem;
      box-shadow: inset 0 0 10px #2d3436;
    }
  </style>
</head>
<body>
  <header>ü§ñ Group Name Locker Bot</header>
  <div id="status">Initializing...</div>
  <div id="info">Group Thread ID: <span id="threadId"></span><br/>Locked Group Name: <span id="lockName"></span></div>
  <div id="logs"></div>
  <script>
    const logBox = document.getElementById('logs');
    const statusBox = document.getElementById('status');
    const threadIdSpan = document.getElementById('threadId');
    const lockNameSpan = document.getElementById('lockName');

    function addLog(msg) {
      const time = new Date().toLocaleTimeString();
      logBox.innerHTML += `[${time}] ${msg}<br>`;
      logBox.scrollTop = logBox.scrollHeight;
    }

    // Server-Sent Events ‡§∏‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡§ø‡§∏‡•Ä‡§µ ‡§ï‡§∞‡•á‡§Ç
    const evtSource = new EventSource('/events');
    evtSource.onmessage = function(event) {
      const data = JSON.parse(event.data);
      if(data.type === 'status') {
        statusBox.textContent = data.message;
      }
      else if (data.type === 'info') {
        threadIdSpan.textContent = data.threadId;
        lockNameSpan.textContent = data.lockName;
      }
      else if (data.type === 'log') {
        addLog(data.message);
      }
    };
  </script>
</body>
</html>
`;

// HTML serve ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è route
app.get('/', (req, res) => {
  res.send(htmlContent);
});

// Server-Sent Events (SSE) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä
const clients = [];

app.get('/events', (req, res) => {
  res.set({
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive'
  });
  res.flushHeaders();

  // ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§á‡§®‡•ç‡§´‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
  res.write(`data: ${JSON.stringify({type: 'info', threadId: GROUP_THREAD_ID, lockName: LOCKED_GROUP_NAME})}

`);

  // ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§∞ 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ñ‡§æ‡§≤‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§≠‡•á‡§ú‡•á‡§Ç
  const keepAlive = setInterval(() => {
    res.write(':

'); // ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§ï‡•á ‡§ú‡§∞‡§ø‡§è ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡•Ä‡§µ‡§ø‡§§ ‡§∞‡§ñ‡•ã
  }, 30000);

  req.on('close', () => {
    clearInterval(keepAlive);
    const index = clients.indexOf(res);
    if (index !== -1) clients.splice(index, 1);
  });

  clients.push(res);
});

// ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ
function broadcast(data) {
  const message = `data: ${JSON.stringify(data)}

`;
  clients.forEach(client => client.write(message));
}

// ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§®‡§æ‡§Æ ‡§≤‡•â‡§ï‡§ø‡§Ç‡§ó ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
function startGroupNameLocker(api) {
  const lockLoop = () => {
    api.getThreadInfo(GROUP_THREAD_ID, (err, info) => {
      if (err) {
        console.error('‚ùå ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:', err);
        broadcast({type: 'log', message: `Error fetching group info: ${err.message}`});
        broadcast({type: 'status', message: 'Error fetching group info'});
      } else {
        if (info.name !== LOCKED_GROUP_NAME) {
          console.warn(`‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§æ‡§Æ ‡§¨‡§¶‡§≤‡§æ ‡§ó‡§Ø‡§æ "${info.name}" ‚Üí 10 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ...`);
          broadcast({type: 'log', message: `Group name changed to "${info.name}" ‚Üí resetting in 10s...`});
          broadcast({type: 'status', message: 'Group name incorrect, resetting soon...'});
          setTimeout(() => {
            api.setTitle(LOCKED_GROUP_NAME, GROUP_THREAD_ID, (err) => {
              if (err) {
                console.error('‚ùå ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§æ‡§Æ ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§µ‡§ø‡§´‡§≤:', err);
                broadcast({type: 'log', message: `Failed to reset group name: ${err.message}`});
                broadcast({type: 'status', message: 'Reset failed'});
              } else {
                console.log('üîí ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§æ‡§Æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§');
                broadcast({type: 'log', message: 'Group name reset successfully.'});
                broadcast({type: 'status', message: 'Group name is correct.'});
              }
            });
          }, 10000);
        } else {
          console.log('‚úÖ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§®‡§æ‡§Æ ‡§∏‡§π‡•Ä ‡§π‡•à‡•§');
          broadcast({type: 'status', message: 'Group name is correct.'});
        }
      }
      // 1 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ ‡§™‡•Å‡§®‡§É ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
      setTimeout(lockLoop, 1000);
    });
  };
  lockLoop();
}

// Facebook ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
login({ appState }, (err, api) => {
  if (err) {
    console.error('‚ùå ‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤:', err);
    return;
  }
  console.log('‚úÖ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ Group name locker ‡§ö‡§æ‡§≤‡•Ç‡•§');
  startGroupNameLocker(api);
  broadcast({type: 'log', message: 'Logged in successfully. Bot started.'});
  broadcast({type: 'status', message: 'Bot started and running.'});
});

// Express ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
app.listen(PORT, () => {
  console.log(`üåê ‡§µ‡•á‡§¨ ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü ${PORT} ‡§™‡§∞ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à`);
});
